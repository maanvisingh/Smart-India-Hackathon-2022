{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled10.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "2Fpbnc8blrNJ"
      },
      "outputs": [],
      "source": [
        "# import dependencies\n",
        "from IPython.display import display, Javascript, Image\n",
        "from google.colab.output import eval_js\n",
        "from google.colab.patches import cv2_imshow\n",
        "from base64 import b64decode, b64encode\n",
        "import cv2\n",
        "import numpy as np\n",
        "import PIL\n",
        "import io\n",
        "import html\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# clone darknet repo\n",
        "!git clone https://github.com/AlexeyAB/darknet"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VNcQF_rvlr_v",
        "outputId": "e617ab6f-b8f8-4796-a6e8-82b8f5eb508c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'darknet'...\n",
            "remote: Enumerating objects: 15412, done.\u001b[K\n",
            "remote: Total 15412 (delta 0), reused 0 (delta 0), pack-reused 15412\u001b[K\n",
            "Receiving objects: 100% (15412/15412), 14.02 MiB | 11.64 MiB/s, done.\n",
            "Resolving deltas: 100% (10356/10356), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# change makefile to have GPU, OPENCV and LIBSO enabled\n",
        "%cd darknet\n",
        "!sed -i 's/OPENCV=0/OPENCV=1/' Makefile\n",
        "!sed -i 's/GPU=0/GPU=1/' Makefile\n",
        "!sed -i 's/CUDNN=0/CUDNN=1/' Makefile\n",
        "!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile\n",
        "!sed -i 's/LIBSO=0/LIBSO=1/' Makefile"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CjO6ScfOluTO",
        "outputId": "8bf6d887-660f-4875-c3a0-a1c2d3be1ffa"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/darknet\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# make darknet (builds darknet so that you can then use the darknet.py file and have its dependencies)\n",
        "!make"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rqnvwb1ulx7C",
        "outputId": "2d050944-301a-40ac-c037-2322a77cfe4e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mkdir -p ./obj/\n",
            "mkdir -p backup\n",
            "chmod +x *.sh\n",
            "g++ -std=c++11 -std=c++11 -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/image_opencv.cpp -o obj/image_opencv.o\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvoid draw_detections_cv_v3(void**, detection*, int, float, char**, image**, int, int)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:946:23:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kvariable ‘\u001b[01m\u001b[Krgb\u001b[m\u001b[K’ set but not used [\u001b[01;35m\u001b[K-Wunused-but-set-variable\u001b[m\u001b[K]\n",
            "                 float \u001b[01;35m\u001b[Krgb\u001b[m\u001b[K[3];\n",
            "                       \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvoid draw_train_loss(char*, void**, int, float, float, int, int, float, int, char*, float, int, int, double)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:1147:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kthis ‘\u001b[01m\u001b[Kif\u001b[m\u001b[K’ clause does not guard... [\u001b[01;35m\u001b[K-Wmisleading-indentation\u001b[m\u001b[K]\n",
            "             \u001b[01;35m\u001b[Kif\u001b[m\u001b[K (iteration_old == 0)\n",
            "             \u001b[01;35m\u001b[K^~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:1150:10:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[K...this statement, but the latter is misleadingly indented as if it were guarded by the ‘\u001b[01m\u001b[Kif\u001b[m\u001b[K’\n",
            "          \u001b[01;36m\u001b[Kif\u001b[m\u001b[K (iteration_old != 0){\n",
            "          \u001b[01;36m\u001b[K^~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvoid cv_draw_object(image, float*, int, int, int*, float*, int*, int, char**)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:1444:14:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kbuff\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         char \u001b[01;35m\u001b[Kbuff\u001b[m\u001b[K[100];\n",
            "              \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:1420:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kit_tb_res\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kit_tb_res\u001b[m\u001b[K = cv::createTrackbar(it_trackbar_name, window_name, &it_trackbar_value, 1000);\n",
            "         \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:1424:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Klr_tb_res\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Klr_tb_res\u001b[m\u001b[K = cv::createTrackbar(lr_trackbar_name, window_name, &lr_trackbar_value, 20);\n",
            "         \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:1428:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kcl_tb_res\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kcl_tb_res\u001b[m\u001b[K = cv::createTrackbar(cl_trackbar_name, window_name, &cl_trackbar_value, classes-1);\n",
            "         \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/image_opencv.cpp:1431:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kbo_tb_res\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kbo_tb_res\u001b[m\u001b[K = cv::createTrackbar(bo_trackbar_name, window_name, boxonly, 1);\n",
            "         \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "g++ -std=c++11 -std=c++11 -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/http_stream.cpp -o obj/http_stream.o\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kbool JSON_sender::write(const char*)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:253:21:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kn\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "                 int \u001b[01;35m\u001b[Kn\u001b[m\u001b[K = _write(client, outputbuf, outlen);\n",
            "                     \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kbool MJPG_sender::write(const cv::Mat&)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:511:113:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%zu\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Ksize_t\u001b[m\u001b[K’, but argument 3 has type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "                 sprintf(head, \"--mjpegstream\\r\\nContent-Type: image/jpeg\\r\\nContent-Length: %zu\\r\\n\\r\\n\", outlen\u001b[01;35m\u001b[K)\u001b[m\u001b[K;\n",
            "                                                                                                                 \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvoid set_track_id(detection*, int, float, float, float, int, int, int)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:867:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         for (int i = 0; \u001b[01;35m\u001b[Ki < v.size()\u001b[m\u001b[K; ++i) {\n",
            "                         \u001b[01;35m\u001b[K~~^~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:875:33:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "     for (int old_id = 0; \u001b[01;35m\u001b[Kold_id < old_dets.size()\u001b[m\u001b[K; ++old_id) {\n",
            "                          \u001b[01;35m\u001b[K~~~~~~~^~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:894:31:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "     for (int index = 0; \u001b[01;35m\u001b[Kindex < new_dets_num*old_dets.size()\u001b[m\u001b[K; ++index) {\n",
            "                         \u001b[01;35m\u001b[K~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/http_stream.cpp:930:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "     if (\u001b[01;35m\u001b[Kold_dets_dq.size() > deque_size\u001b[m\u001b[K) old_dets_dq.pop_front();\n",
            "         \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/gemm.c -o obj/gemm.o\n",
            "\u001b[01m\u001b[K./src/gemm.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kconvolution_2d\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/gemm.c:2044:15:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kout_w\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     const int \u001b[01;35m\u001b[Kout_w\u001b[m\u001b[K = (w + 2 * pad - ksize) / stride + 1;    // output_width=input_width for stride=1 and pad=1\n",
            "               \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/gemm.c:2043:15:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kout_h\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     const int \u001b[01;35m\u001b[Kout_h\u001b[m\u001b[K = (h + 2 * pad - ksize) / stride + 1;    // output_height=input_height for stride=1 and pad=1\n",
            "               \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/utils.c -o obj/utils.o\n",
            "\u001b[01m\u001b[K./src/utils.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kcustom_hash\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/utils.c:1061:12:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Ksuggest parentheses around assignment used as truth value [\u001b[01;35m\u001b[K-Wparentheses\u001b[m\u001b[K]\n",
            "     while (\u001b[01;35m\u001b[Kc\u001b[m\u001b[K = *str++)\n",
            "            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/dark_cuda.c -o obj/dark_cuda.o\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kcudnn_check_error_extended\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:230:20:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between ‘\u001b[01m\u001b[KcudaError_t {aka enum cudaError}\u001b[m\u001b[K’ and ‘\u001b[01m\u001b[Kenum <anonymous>\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wenum-compare\u001b[m\u001b[K]\n",
            "         if (status \u001b[01;35m\u001b[K!=\u001b[m\u001b[K CUDNN_STATUS_SUCCESS)\n",
            "                    \u001b[01;35m\u001b[K^~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kcublas_check_error_extended\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:264:18:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between ‘\u001b[01m\u001b[KcudaError_t {aka enum cudaError}\u001b[m\u001b[K’ and ‘\u001b[01m\u001b[Kenum cudaError_enum\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wenum-compare\u001b[m\u001b[K]\n",
            "       if (status \u001b[01;35m\u001b[K!=\u001b[m\u001b[K CUDA_SUCCESS)\n",
            "                  \u001b[01;35m\u001b[K^~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kpre_allocate_pinned_memory\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:395:40:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%u\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kunsigned int\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Klong unsigned int\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\"pre_allocate: size = \u001b[01;35m\u001b[K%Iu\u001b[m\u001b[K MB, num_of_blocks = %Iu, block_size = %Iu MB \\n\",\n",
            "                                      \u001b[01;35m\u001b[K~~^\u001b[m\u001b[K\n",
            "                                      \u001b[32m\u001b[K%Ilu\u001b[m\u001b[K\n",
            "             \u001b[32m\u001b[Ksize / (1024*1024)\u001b[m\u001b[K, num_of_blocks, pinned_block_size / (1024 * 1024));\n",
            "             \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K          \n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:395:64:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%u\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kunsigned int\u001b[m\u001b[K’, but argument 3 has type ‘\u001b[01m\u001b[Ksize_t {aka const long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\"pre_allocate: size = %Iu MB, num_of_blocks = \u001b[01;35m\u001b[K%Iu\u001b[m\u001b[K, block_size = %Iu MB \\n\",\n",
            "                                                              \u001b[01;35m\u001b[K~~^\u001b[m\u001b[K\n",
            "                                                              \u001b[32m\u001b[K%Ilu\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:395:82:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%u\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kunsigned int\u001b[m\u001b[K’, but argument 4 has type ‘\u001b[01m\u001b[Klong unsigned int\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\"pre_allocate: size = %Iu MB, num_of_blocks = %Iu, block_size = \u001b[01;35m\u001b[K%Iu\u001b[m\u001b[K MB \\n\",\n",
            "                                                                                \u001b[01;35m\u001b[K~~^\u001b[m\u001b[K\n",
            "                                                                                \u001b[32m\u001b[K%Ilu\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:405:37:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Ksize_t {aka const long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "                 printf(\" Allocated \u001b[01;35m\u001b[K%d\u001b[m\u001b[K pinned block \\n\", pinned_block_size);\n",
            "                                    \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                    \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kcuda_make_array_pinned_preallocated\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:426:43:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "             printf(\"\\n Pinned block_id = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K, filled = %f %% \\n\", pinned_block_id, filled);\n",
            "                                          \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                          \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:441:64:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Klong unsigned int\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "             printf(\"Try to allocate new pinned memory, size = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K MB \\n\", \u001b[32m\u001b[Ksize / (1024 * 1024)\u001b[m\u001b[K);\n",
            "                                                               \u001b[01;35m\u001b[K~^\u001b[m\u001b[K         \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "                                                               \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:447:63:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Klong unsigned int\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "             printf(\"Try to allocate new pinned BLOCK, size = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K MB \\n\", \u001b[32m\u001b[Ksize / (1024 * 1024)\u001b[m\u001b[K);\n",
            "                                                              \u001b[01;35m\u001b[K~^\u001b[m\u001b[K         \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "                                                              \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "At top level:\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:287:23:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[KswitchBlasHandle\u001b[m\u001b[K’ defined but not used [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            " static cublasHandle_t \u001b[01;35m\u001b[KswitchBlasHandle\u001b[m\u001b[K[16];\n",
            "                       \u001b[01;35m\u001b[K^~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/dark_cuda.c:286:12:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[KswitchBlasInit\u001b[m\u001b[K’ defined but not used [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            " static int \u001b[01;35m\u001b[KswitchBlasInit\u001b[m\u001b[K[16] = { 0 };\n",
            "            \u001b[01;35m\u001b[K^~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/convolutional_layer.c -o obj/convolutional_layer.o\n",
            "\u001b[01m\u001b[K./src/convolutional_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kforward_convolutional_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/convolutional_layer.c:1342:32:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kt_intput_size\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "                         size_t \u001b[01;35m\u001b[Kt_intput_size\u001b[m\u001b[K = binary_transpose_align_input(k, n, state.workspace, &l.t_bit_input, ldb_align, l.bit_align);\n",
            "                                \u001b[01;35m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/list.c -o obj/list.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/image.c -o obj/image.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/activations.c -o obj/activations.o\n",
            "\u001b[01m\u001b[K./src/activations.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kactivate\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/activations.c:79:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KRELU6\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "     \u001b[01;35m\u001b[Kswitch\u001b[m\u001b[K(a){\n",
            "     \u001b[01;35m\u001b[K^~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/activations.c:79:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KSWISH\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "\u001b[01m\u001b[K./src/activations.c:79:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KMISH\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "\u001b[01m\u001b[K./src/activations.c:79:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KHARD_MISH\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "\u001b[01m\u001b[K./src/activations.c:79:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KNORM_CHAN\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "\u001b[01m\u001b[K./src/activations.c:79:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KNORM_CHAN_SOFTMAX\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "\u001b[01m\u001b[K./src/activations.c:79:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KNORM_CHAN_SOFTMAX_MAXVAL\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "\u001b[01m\u001b[K./src/activations.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kgradient\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/activations.c:310:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KSWISH\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "     \u001b[01;35m\u001b[Kswitch\u001b[m\u001b[K(a){\n",
            "     \u001b[01;35m\u001b[K^~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/activations.c:310:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KMISH\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "\u001b[01m\u001b[K./src/activations.c:310:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KHARD_MISH\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/im2col.c -o obj/im2col.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/col2im.c -o obj/col2im.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/blas.c -o obj/blas.o\n",
            "\u001b[01m\u001b[K./src/blas.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kbackward_shortcut_multilayer_cpu\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/blas.c:207:21:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kout_index\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "                 int \u001b[01;35m\u001b[Kout_index\u001b[m\u001b[K = id;\n",
            "                     \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kfind_sim\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/blas.c:597:59:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\" Error: find_sim(): sim isn't found: i = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K, j = %d, z = %d \\n\", i, j, z);\n",
            "                                                          \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                          \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:597:67:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 3 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\" Error: find_sim(): sim isn't found: i = %d, j = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K, z = %d \\n\", i, j, z);\n",
            "                                                                  \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                  \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:597:75:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 4 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\" Error: find_sim(): sim isn't found: i = %d, j = %d, z = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K \\n\", i, j, z);\n",
            "                                                                          \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                          \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kfind_P_constrastive\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/blas.c:611:68:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\" Error: find_P_constrastive(): P isn't found: i = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K, j = %d, z = %d \\n\", i, j, z);\n",
            "                                                                   \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                   \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:611:76:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 3 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\" Error: find_P_constrastive(): P isn't found: i = %d, j = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K, z = %d \\n\", i, j, z);\n",
            "                                                                           \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                           \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:611:84:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 4 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         printf(\" Error: find_P_constrastive(): P isn't found: i = %d, j = %d, z = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K \\n\", i, j, z);\n",
            "                                                                                   \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                                   \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[KP_constrastive_f\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/blas.c:651:79:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 3 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         fprintf(stderr, \" Error: in P_constrastive must be i != l, while i = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K, l = %d \\n\", i, l);\n",
            "                                                                              \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                              \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:651:87:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 4 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         fprintf(stderr, \" Error: in P_constrastive must be i != l, while i = %d, l = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K \\n\", i, l);\n",
            "                                                                                      \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                                      \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[KP_constrastive\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/blas.c:785:79:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 3 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         fprintf(stderr, \" Error: in P_constrastive must be i != l, while i = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K, l = %d \\n\", i, l);\n",
            "                                                                              \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                              \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/blas.c:785:87:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 4 has type ‘\u001b[01m\u001b[Ksize_t {aka long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "         fprintf(stderr, \" Error: in P_constrastive must be i != l, while i = %d, l = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K \\n\", i, l);\n",
            "                                                                                      \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                                      \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/crop_layer.c -o obj/crop_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/dropout_layer.c -o obj/dropout_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/maxpool_layer.c -o obj/maxpool_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/softmax_layer.c -o obj/softmax_layer.o\n",
            "\u001b[01m\u001b[K./src/softmax_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kmake_contrastive_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/softmax_layer.c:203:101:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 9 has type ‘\u001b[01m\u001b[Ksize_t {aka const long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "     fprintf(stderr, \"contrastive %4d x%4d x%4d x emb_size %4d x batch: %4d  classes = %4d, step = \u001b[01;35m\u001b[K%4d\u001b[m\u001b[K \\n\", w, h, l.n, l.embedding_size, batch, l.classes, step);\n",
            "                                                                                                   \u001b[01;35m\u001b[K~~^\u001b[m\u001b[K\n",
            "                                                                                                   \u001b[32m\u001b[K%4ld\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/softmax_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kforward_contrastive_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/softmax_layer.c:244:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kvariable ‘\u001b[01m\u001b[Kmax_truth\u001b[m\u001b[K’ set but not used [\u001b[01;35m\u001b[K-Wunused-but-set-variable\u001b[m\u001b[K]\n",
            "                     float \u001b[01;35m\u001b[Kmax_truth\u001b[m\u001b[K = 0;\n",
            "                           \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/softmax_layer.c:423:71:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat ‘\u001b[01m\u001b[K%d\u001b[m\u001b[K’ expects argument of type ‘\u001b[01m\u001b[Kint\u001b[m\u001b[K’, but argument 2 has type ‘\u001b[01m\u001b[Ksize_t {aka const long unsigned int}\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wformat=\u001b[m\u001b[K]\n",
            "             printf(\" Error: too large number of bboxes: contr_size = \u001b[01;35m\u001b[K%d\u001b[m\u001b[K > max_contr_size  = %d \\n\", contr_size, max_contr_size);\n",
            "                                                                      \u001b[01;35m\u001b[K~^\u001b[m\u001b[K\n",
            "                                                                      \u001b[32m\u001b[K%ld\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/data.c -o obj/data.o\n",
            "\u001b[01m\u001b[K./src/data.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kload_data_detection\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/data.c:1297:24:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kx\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "                 int k, \u001b[01;35m\u001b[Kx\u001b[m\u001b[K, y;\n",
            "                        \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/data.c:1090:43:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kvariable ‘\u001b[01m\u001b[Kr_scale\u001b[m\u001b[K’ set but not used [\u001b[01;35m\u001b[K-Wunused-but-set-variable\u001b[m\u001b[K]\n",
            "     float r1 = 0, r2 = 0, r3 = 0, r4 = 0, \u001b[01;35m\u001b[Kr_scale\u001b[m\u001b[K = 0;\n",
            "                                           \u001b[01;35m\u001b[K^~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/matrix.c -o obj/matrix.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/network.c -o obj/network.o\n",
            "\u001b[01m\u001b[K./src/network.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Ktrain_network_waitkey\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/network.c:435:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kema_period\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         int \u001b[01;35m\u001b[Kema_period\u001b[m\u001b[K = (net.max_batches - ema_start_point - 1000) * (1.0 - net.ema_alpha);\n",
            "             \u001b[01;35m\u001b[K^~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/network.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kresize_network\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/network.c:660:42:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "         if (cudaSuccess == cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Knet->input_pinned_cpu, size * sizeof(float), cudaHostRegisterMapped))\n",
            "                                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/network.c:1\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/connected_layer.c -o obj/connected_layer.o\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kforward_connected_layer_gpu\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:346:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kone\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Kone\u001b[m\u001b[K = 1;    // alpha[0], beta[0]\n",
            "           \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:344:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kc\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float * \u001b[01;35m\u001b[Kc\u001b[m\u001b[K = l.output_gpu;\n",
            "             \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:343:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kb\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float * \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = l.weights_gpu;\n",
            "             \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:342:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ka\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float * \u001b[01;35m\u001b[Ka\u001b[m\u001b[K = state.input;\n",
            "             \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:341:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kn\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kn\u001b[m\u001b[K = l.outputs;\n",
            "         \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:340:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kk\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kk\u001b[m\u001b[K = l.inputs;\n",
            "         \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/connected_layer.c:339:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Km\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Km\u001b[m\u001b[K = l.batch;\n",
            "         \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/cost_layer.c -o obj/cost_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/parser.c -o obj/parser.o\n",
            "\u001b[01m\u001b[K./src/parser.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kparse_network_cfg_custom\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/parser.c:1777:42:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "         if (cudaSuccess == cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Knet.input_pinned_cpu, size * sizeof(float), cudaHostRegisterMapped)) net.input_pinned_cpu_flag = 1;\n",
            "                                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/activations.h:3\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/activation_layer.h:4\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/parser.c:6\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/parser.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Ksave_implicit_weights\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/parser.c:1909:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ki\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Ki\u001b[m\u001b[K;\n",
            "         \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/parser.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kget_classes_multipliers\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/parser.c:438:29:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kargument 1 range [18446744071562067968, 18446744073709551615] exceeds maximum object size 9223372036854775807 [\u001b[01;35m\u001b[K-Walloc-size-larger-than=\u001b[m\u001b[K]\n",
            "         \u001b[01;35m\u001b[Kclasses_multipliers = (float *)calloc(classes_counters, sizeof(float))\u001b[m\u001b[K;\n",
            "         \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K./src/parser.c:3:0\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/stdlib.h:541:14:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kin a call to allocation function ‘\u001b[01m\u001b[Kcalloc\u001b[m\u001b[K’ declared here\n",
            " extern void *\u001b[01;36m\u001b[Kcalloc\u001b[m\u001b[K (size_t __nmemb, size_t __size)\n",
            "              \u001b[01;36m\u001b[K^~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/option_list.c -o obj/option_list.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/darknet.c -o obj/darknet.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/detection_layer.c -o obj/detection_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/captcha.c -o obj/captcha.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/route_layer.c -o obj/route_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/writing.c -o obj/writing.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/box.c -o obj/box.o\n",
            "\u001b[01m\u001b[K./src/box.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kbox_iou_kind\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/box.c:154:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kenumeration value ‘\u001b[01m\u001b[KMSE\u001b[m\u001b[K’ not handled in switch [\u001b[01;35m\u001b[K-Wswitch\u001b[m\u001b[K]\n",
            "     \u001b[01;35m\u001b[Kswitch\u001b[m\u001b[K(iou_kind) {\n",
            "     \u001b[01;35m\u001b[K^~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/box.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kdiounms_sort\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/box.c:898:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kbeta_prob\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "                     float \u001b[01;35m\u001b[Kbeta_prob\u001b[m\u001b[K = pow(dets[j].prob[k], 2) / sum_prob;\n",
            "                           \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/box.c:897:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kalpha_prob\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "                     float \u001b[01;35m\u001b[Kalpha_prob\u001b[m\u001b[K = pow(dets[i].prob[k], 2) / sum_prob;\n",
            "                           \u001b[01;35m\u001b[K^~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/nightmare.c -o obj/nightmare.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/normalization_layer.c -o obj/normalization_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/avgpool_layer.c -o obj/avgpool_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/coco.c -o obj/coco.o\n",
            "\u001b[01m\u001b[K./src/coco.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvalidate_coco_recall\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/coco.c:248:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kbase\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     char *\u001b[01;35m\u001b[Kbase\u001b[m\u001b[K = \"results/comp4_det_test_\";\n",
            "           \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/dice.c -o obj/dice.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/yolo.c -o obj/yolo.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/detector.c -o obj/detector.o\n",
            "\u001b[01m\u001b[K./src/detector.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Ktrain_detector\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/detector.c:395:72:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Ksuggest parentheses around ‘\u001b[01m\u001b[K&&\u001b[m\u001b[K’ within ‘\u001b[01m\u001b[K||\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wparentheses\u001b[m\u001b[K]\n",
            "             \u001b[01;35m\u001b[K(iteration >= (iter_save + 1000) || iteration % 1000 == 0) && net.max_batches < 10000\u001b[m\u001b[K)\n",
            "             \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kprint_cocos\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/detector.c:495:29:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat not a string literal and no format arguments [\u001b[01;35m\u001b[K-Wformat-security\u001b[m\u001b[K]\n",
            "                 fprintf(fp, \u001b[01;35m\u001b[Kbuff\u001b[m\u001b[K);\n",
            "                             \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Keliminate_bdd\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/detector.c:588:21:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kstatement with no effect [\u001b[01;35m\u001b[K-Wunused-value\u001b[m\u001b[K]\n",
            "                     \u001b[01;35m\u001b[Kfor\u001b[m\u001b[K (k; buf[k + n] != '\\0'; k++)\n",
            "                     \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvalidate_detector\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/detector.c:709:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kmkd2\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         int \u001b[01;35m\u001b[Kmkd2\u001b[m\u001b[K = make_directory(buff2, 0777);\n",
            "             \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:707:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kmkd\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         int \u001b[01;35m\u001b[Kmkd\u001b[m\u001b[K = make_directory(buff, 0777);\n",
            "             \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvalidate_detector_map\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/detector.c:1326:24:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kvariable ‘\u001b[01m\u001b[Kcur_prob\u001b[m\u001b[K’ set but not used [\u001b[01;35m\u001b[K-Wunused-but-set-variable\u001b[m\u001b[K]\n",
            "                 double \u001b[01;35m\u001b[Kcur_prob\u001b[m\u001b[K = 0;\n",
            "                        \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:1347:15:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kclass_recall\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         float \u001b[01;35m\u001b[Kclass_recall\u001b[m\u001b[K = (float)tp_for_thresh_per_class[i] / ((float)tp_for_thresh_per_class[i] + (float)(truth_classes_count[i] - tp_for_thresh_per_class[i]));\n",
            "               \u001b[01;35m\u001b[K^~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:1346:15:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kclass_precision\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         float \u001b[01;35m\u001b[Kclass_precision\u001b[m\u001b[K = (float)tp_for_thresh_per_class[i] / ((float)tp_for_thresh_per_class[i] + (float)fp_for_thresh_per_class[i]);\n",
            "               \u001b[01;35m\u001b[K^~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/detector.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kdraw_object\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/detector.c:1890:19:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kinv_loss\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "             float \u001b[01;35m\u001b[Kinv_loss\u001b[m\u001b[K = 1.0 / max_val_cmp(0.01, avg_loss);\n",
            "                   \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/layer.c -o obj/layer.o\n",
            "\u001b[01m\u001b[K./src/layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kfree_layer_custom\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/layer.c:208:68:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Ksuggest parentheses around ‘\u001b[01m\u001b[K&&\u001b[m\u001b[K’ within ‘\u001b[01m\u001b[K||\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wparentheses\u001b[m\u001b[K]\n",
            "     if (l.delta_gpu && (l.optimized_memory < 1 || \u001b[01;35m\u001b[Kl.keep_delta_gpu && l.optimized_memory < 3\u001b[m\u001b[K)) cuda_free(l.delta_gpu), l.delta_gpu = NULL;\n",
            "                                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/compare.c -o obj/compare.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/classifier.c -o obj/classifier.o\n",
            "\u001b[01m\u001b[K./src/classifier.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Ktrain_classifier\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/classifier.c:146:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kcount\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kcount\u001b[m\u001b[K = 0;\n",
            "         \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/classifier.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kpredict_classifier\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/classifier.c:855:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktime\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     clock_t \u001b[01;35m\u001b[Ktime\u001b[m\u001b[K;\n",
            "             \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/classifier.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kdemo_classifier\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/classifier.c:1287:49:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktval_result\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         struct timeval tval_before, tval_after, \u001b[01;35m\u001b[Ktval_result\u001b[m\u001b[K;\n",
            "                                                 \u001b[01;35m\u001b[K^~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/classifier.c:1287:37:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktval_after\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         struct timeval tval_before, \u001b[01;35m\u001b[Ktval_after\u001b[m\u001b[K, tval_result;\n",
            "                                     \u001b[01;35m\u001b[K^~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/local_layer.c -o obj/local_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/swag.c -o obj/swag.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/shortcut_layer.c -o obj/shortcut_layer.o\n",
            "\u001b[01m\u001b[K./src/shortcut_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kmake_shortcut_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/shortcut_layer.c:55:15:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kscale\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         float \u001b[01;35m\u001b[Kscale\u001b[m\u001b[K = sqrt(2. / l.nweights);\n",
            "               \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/representation_layer.c -o obj/representation_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/activation_layer.c -o obj/activation_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/rnn_layer.c -o obj/rnn_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/gru_layer.c -o obj/gru_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/rnn.c -o obj/rnn.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/rnn_vid.c -o obj/rnn_vid.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/crnn_layer.c -o obj/crnn_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/demo.c -o obj/demo.o\n",
            "\u001b[01m\u001b[K./src/demo.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kdetect_in_thread\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/demo.c:101:15:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kl\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "         layer \u001b[01;35m\u001b[Kl\u001b[m\u001b[K = net.layers[net.n - 1];\n",
            "               \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/tag.c -o obj/tag.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/cifar.c -o obj/cifar.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/go.c -o obj/go.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/batchnorm_layer.c -o obj/batchnorm_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/art.c -o obj/art.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/region_layer.c -o obj/region_layer.o\n",
            "\u001b[01m\u001b[K./src/region_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kresize_region_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/region_layer.c:63:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kold_h\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kold_h\u001b[m\u001b[K = l->h;\n",
            "         \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/region_layer.c:62:9:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kold_w\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int \u001b[01;35m\u001b[Kold_w\u001b[m\u001b[K = l->w;\n",
            "         \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/reorg_layer.c -o obj/reorg_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/reorg_old_layer.c -o obj/reorg_old_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/super.c -o obj/super.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/voxel.c -o obj/voxel.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/tree.c -o obj/tree.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/yolo_layer.c -o obj/yolo_layer.o\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kmake_yolo_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:68:38:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "     if (cudaSuccess == cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl.output, batch*l.outputs*sizeof(float), cudaHostRegisterMapped)) l.output_pinned = 1;\n",
            "                                      \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/activations.h:3\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/layer.h:4\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.c:1\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:75:38:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "     if (cudaSuccess == cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl.delta, batch*l.outputs*sizeof(float), cudaHostRegisterMapped)) l.delta_pinned = 1;\n",
            "                                      \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/activations.h:3\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/layer.h:4\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.c:1\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kresize_yolo_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:106:42:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "         if (cudaSuccess != cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl->output, l->batch*l->outputs * sizeof(float), cudaHostRegisterMapped)) {\n",
            "                                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/activations.h:3\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/layer.h:4\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.c:1\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:115:42:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "         if (cudaSuccess != cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl->delta, l->batch*l->outputs * sizeof(float), cudaHostRegisterMapped)) {\n",
            "                                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/activations.h:3\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/layer.h:4\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/yolo_layer.c:1\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kprocess_batch\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:426:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kvariable ‘\u001b[01m\u001b[Kbest_match_t\u001b[m\u001b[K’ set but not used [\u001b[01;35m\u001b[K-Wunused-but-set-variable\u001b[m\u001b[K]\n",
            "                     int \u001b[01;35m\u001b[Kbest_match_t\u001b[m\u001b[K = 0;\n",
            "                         \u001b[01;35m\u001b[K^~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kforward_yolo_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:707:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kavg_anyobj\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Kavg_anyobj\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:706:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kavg_obj\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Kavg_obj\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:705:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kavg_cat\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Kavg_cat\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:704:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Krecall75\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Krecall75\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:703:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Krecall\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Krecall\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:702:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktot_ciou_loss\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Ktot_ciou_loss\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:701:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktot_diou_loss\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Ktot_diou_loss\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:698:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktot_ciou\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Ktot_ciou\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:697:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktot_diou\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Ktot_diou\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:696:11:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Ktot_giou\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     float \u001b[01;35m\u001b[Ktot_giou\u001b[m\u001b[K = 0;\n",
            "           \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/yolo_layer.c:668:12:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kn\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int b, \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/gaussian_yolo_layer.c -o obj/gaussian_yolo_layer.o\n",
            "\u001b[01m\u001b[K./src/gaussian_yolo_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kmake_gaussian_yolo_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/gaussian_yolo_layer.c:72:38:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "     if (cudaSuccess == cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl.output, batch*l.outputs * sizeof(float), cudaHostRegisterMapped)) l.output_pinned = 1;\n",
            "                                      \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.c:7\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/gaussian_yolo_layer.c:79:38:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "     if (cudaSuccess == cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl.delta, batch*l.outputs * sizeof(float), cudaHostRegisterMapped)) l.delta_pinned = 1;\n",
            "                                      \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.c:7\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/gaussian_yolo_layer.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kresize_gaussian_yolo_layer\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/gaussian_yolo_layer.c:111:42:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "         if (cudaSuccess != cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl->output, l->batch*l->outputs * sizeof(float), cudaHostRegisterMapped)) {\n",
            "                                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.c:7\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[K./src/gaussian_yolo_layer.c:120:42:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kpassing argument 1 of ‘\u001b[01m\u001b[KcudaHostAlloc\u001b[m\u001b[K’ from incompatible pointer type [\u001b[01;35m\u001b[K-Wincompatible-pointer-types\u001b[m\u001b[K]\n",
            "         if (cudaSuccess != cudaHostAlloc(\u001b[01;35m\u001b[K&\u001b[m\u001b[Kl->delta, l->batch*l->outputs * sizeof(float), cudaHostRegisterMapped)) {\n",
            "                                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime.h:96:0\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kinclude/darknet.h:41\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.h:5\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K./src/gaussian_yolo_layer.c:7\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/local/cuda/include/cuda_runtime_api.h:4811:39:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[Kexpected ‘\u001b[01m\u001b[Kvoid **\u001b[m\u001b[K’ but argument is of type ‘\u001b[01m\u001b[Kfloat **\u001b[m\u001b[K’\n",
            " extern __host__ cudaError_t CUDARTAPI \u001b[01;36m\u001b[KcudaHostAlloc\u001b[m\u001b[K(void **pHost, size_t size, unsigned int flags);\n",
            "                                       \u001b[01;36m\u001b[K^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/upsample_layer.c -o obj/upsample_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/lstm_layer.c -o obj/lstm_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/conv_lstm_layer.c -o obj/conv_lstm_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/scale_channels_layer.c -o obj/scale_channels_layer.o\n",
            "gcc -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -c ./src/sam_layer.c -o obj/sam_layer.o\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/convolutional_kernels.cu -o obj/convolutional_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/activation_kernels.cu -o obj/activation_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "./src/activation_kernels.cu(263): warning: variable \"MISH_THRESHOLD\" was declared but never referenced\n",
            "\n",
            "./src/activation_kernels.cu(263): warning: variable \"MISH_THRESHOLD\" was declared but never referenced\n",
            "\n",
            "./src/activation_kernels.cu(263): warning: variable \"MISH_THRESHOLD\" was declared but never referenced\n",
            "\n",
            "./src/activation_kernels.cu(263): warning: variable \"MISH_THRESHOLD\" was declared but never referenced\n",
            "\n",
            "./src/activation_kernels.cu(263): warning: variable \"MISH_THRESHOLD\" was declared but never referenced\n",
            "\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/im2col_kernels.cu -o obj/im2col_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "./src/im2col_kernels.cu(1354): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1361): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1364): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1389): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1354): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1361): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1364): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1389): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1354): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1361): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1364): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1389): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1354): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1361): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1364): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1389): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1354): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1361): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1364): warning: unrecognized #pragma in device code\n",
            "\n",
            "./src/im2col_kernels.cu(1389): warning: unrecognized #pragma in device code\n",
            "\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/col2im_kernels.cu -o obj/col2im_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/blas_kernels.cu -o obj/blas_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "./src/blas_kernels.cu(1086): warning: variable \"out_index\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1130): warning: variable \"step\" was set but never used\n",
            "\n",
            "./src/blas_kernels.cu(1736): warning: variable \"stage_id\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1086): warning: variable \"out_index\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1130): warning: variable \"step\" was set but never used\n",
            "\n",
            "./src/blas_kernels.cu(1736): warning: variable \"stage_id\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1086): warning: variable \"out_index\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1130): warning: variable \"step\" was set but never used\n",
            "\n",
            "./src/blas_kernels.cu(1736): warning: variable \"stage_id\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1086): warning: variable \"out_index\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1130): warning: variable \"step\" was set but never used\n",
            "\n",
            "./src/blas_kernels.cu(1736): warning: variable \"stage_id\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1086): warning: variable \"out_index\" was declared but never referenced\n",
            "\n",
            "./src/blas_kernels.cu(1130): warning: variable \"step\" was set but never used\n",
            "\n",
            "./src/blas_kernels.cu(1736): warning: variable \"stage_id\" was declared but never referenced\n",
            "\n",
            "\u001b[01m\u001b[K./src/blas_kernels.cu:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvoid backward_shortcut_multilayer_gpu(int, int, int, int*, float**, float*, float*, float*, float*, int, float*, float**, WEIGHTS_NORMALIZATION_T)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/blas_kernels.cu:1130:5:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kvariable ‘\u001b[01m\u001b[Kstep\u001b[m\u001b[K’ set but not used [\u001b[01;35m\u001b[K-Wunused-but-set-variable\u001b[m\u001b[K]\n",
            "     \u001b[01;35m\u001b[Kint \u001b[m\u001b[Kstep = 0;\n",
            "     \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/crop_layer_kernels.cu -o obj/crop_layer_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/dropout_layer_kernels.cu -o obj/dropout_layer_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/maxpool_layer_kernels.cu -o obj/maxpool_layer_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/network_kernels.cu -o obj/network_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "./src/network_kernels.cu(379): warning: variable \"l\" was declared but never referenced\n",
            "\n",
            "./src/network_kernels.cu(379): warning: variable \"l\" was declared but never referenced\n",
            "\n",
            "./src/network_kernels.cu(379): warning: variable \"l\" was declared but never referenced\n",
            "\n",
            "./src/network_kernels.cu(379): warning: variable \"l\" was declared but never referenced\n",
            "\n",
            "./src/network_kernels.cu(379): warning: variable \"l\" was declared but never referenced\n",
            "\n",
            "\u001b[01m\u001b[K./src/network_kernels.cu:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kfloat train_network_datum_gpu(network, float*, float*)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[K./src/network_kernels.cu:379:7:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kvariable ‘\u001b[01m\u001b[Kl\u001b[m\u001b[K’ set but not used [\u001b[01;35m\u001b[K-Wunused-but-set-variable\u001b[m\u001b[K]\n",
            "       \u001b[01;35m\u001b[K \u001b[m\u001b[K layer l = net.layers[net.n - 1];\n",
            "       \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -gencode arch=compute_70,code=[sm_70,compute_70] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF --compiler-options \"-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC\" -c ./src/avgpool_layer_kernels.cu -o obj/avgpool_layer_kernels.o\n",
            "nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).\n",
            "g++ -std=c++11 -std=c++11 -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC obj/image_opencv.o obj/http_stream.o obj/gemm.o obj/utils.o obj/dark_cuda.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/darknet.o obj/detection_layer.o obj/captcha.o obj/route_layer.o obj/writing.o obj/box.o obj/nightmare.o obj/normalization_layer.o obj/avgpool_layer.o obj/coco.o obj/dice.o obj/yolo.o obj/detector.o obj/layer.o obj/compare.o obj/classifier.o obj/local_layer.o obj/swag.o obj/shortcut_layer.o obj/representation_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/rnn.o obj/rnn_vid.o obj/crnn_layer.o obj/demo.o obj/tag.o obj/cifar.o obj/go.o obj/batchnorm_layer.o obj/art.o obj/region_layer.o obj/reorg_layer.o obj/reorg_old_layer.o obj/super.o obj/voxel.o obj/tree.o obj/yolo_layer.o obj/gaussian_yolo_layer.o obj/upsample_layer.o obj/lstm_layer.o obj/conv_lstm_layer.o obj/scale_channels_layer.o obj/sam_layer.o obj/convolutional_kernels.o obj/activation_kernels.o obj/im2col_kernels.o obj/col2im_kernels.o obj/blas_kernels.o obj/crop_layer_kernels.o obj/dropout_layer_kernels.o obj/maxpool_layer_kernels.o obj/network_kernels.o obj/avgpool_layer_kernels.o -o darknet -lm -pthread `pkg-config --libs opencv4 2> /dev/null || pkg-config --libs opencv` -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand -L/usr/local/cudnn/lib64 -lcudnn -lstdc++\n",
            "g++ -std=c++11 -shared -std=c++11 -fvisibility=hidden -DLIB_EXPORTS -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC ./obj/image_opencv.o ./obj/http_stream.o ./obj/gemm.o ./obj/utils.o ./obj/dark_cuda.o ./obj/convolutional_layer.o ./obj/list.o ./obj/image.o ./obj/activations.o ./obj/im2col.o ./obj/col2im.o ./obj/blas.o ./obj/crop_layer.o ./obj/dropout_layer.o ./obj/maxpool_layer.o ./obj/softmax_layer.o ./obj/data.o ./obj/matrix.o ./obj/network.o ./obj/connected_layer.o ./obj/cost_layer.o ./obj/parser.o ./obj/option_list.o ./obj/darknet.o ./obj/detection_layer.o ./obj/captcha.o ./obj/route_layer.o ./obj/writing.o ./obj/box.o ./obj/nightmare.o ./obj/normalization_layer.o ./obj/avgpool_layer.o ./obj/coco.o ./obj/dice.o ./obj/yolo.o ./obj/detector.o ./obj/layer.o ./obj/compare.o ./obj/classifier.o ./obj/local_layer.o ./obj/swag.o ./obj/shortcut_layer.o ./obj/representation_layer.o ./obj/activation_layer.o ./obj/rnn_layer.o ./obj/gru_layer.o ./obj/rnn.o ./obj/rnn_vid.o ./obj/crnn_layer.o ./obj/demo.o ./obj/tag.o ./obj/cifar.o ./obj/go.o ./obj/batchnorm_layer.o ./obj/art.o ./obj/region_layer.o ./obj/reorg_layer.o ./obj/reorg_old_layer.o ./obj/super.o ./obj/voxel.o ./obj/tree.o ./obj/yolo_layer.o ./obj/gaussian_yolo_layer.o ./obj/upsample_layer.o ./obj/lstm_layer.o ./obj/conv_lstm_layer.o ./obj/scale_channels_layer.o ./obj/sam_layer.o ./obj/convolutional_kernels.o ./obj/activation_kernels.o ./obj/im2col_kernels.o ./obj/col2im_kernels.o ./obj/blas_kernels.o ./obj/crop_layer_kernels.o ./obj/dropout_layer_kernels.o ./obj/maxpool_layer_kernels.o ./obj/network_kernels.o ./obj/avgpool_layer_kernels.o src/yolo_v2_class.cpp -o libdarknet.so -lm -pthread `pkg-config --libs opencv4 2> /dev/null || pkg-config --libs opencv` -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand -L/usr/local/cudnn/lib64 -lcudnn -lstdc++\n",
            "In file included from \u001b[01m\u001b[Ksrc/yolo_v2_class.cpp:2:0\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kvoid track_kalman_t::clear_old_states()\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:879:50:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "                 if ((result_vec_pred[state_id].x > img_size.width) ||\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:880:50:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "                     (result_vec_pred[state_id].y > img_size.height))\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ktrack_kalman_t::tst_t track_kalman_t::get_state_id(bbox_t, std::vector<bool>&)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:900:30:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         for (size_t i = 0; \u001b[01;35m\u001b[Ki < max_objects\u001b[m\u001b[K; ++i)\n",
            "                            \u001b[01;35m\u001b[K~~^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kstd::vector<bbox_t> track_kalman_t::predict()\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:990:30:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         for (size_t i = 0; \u001b[01;35m\u001b[Ki < max_objects\u001b[m\u001b[K; ++i)\n",
            "                            \u001b[01;35m\u001b[K~~^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kstd::vector<bbox_t> track_kalman_t::correct(std::vector<bbox_t>)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:1025:30:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         for (size_t i = 0; \u001b[01;35m\u001b[Ki < max_objects\u001b[m\u001b[K; ++i)\n",
            "                            \u001b[01;35m\u001b[K~~^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Ksrc/yolo_v2_class.cpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kstd::vector<bbox_t> Detector::tracking_id(std::vector<bbox_t>, bool, int, int)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Ksrc/yolo_v2_class.cpp:439:40:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         if (\u001b[01;35m\u001b[Kprev_bbox_vec_deque.size() > frames_story\u001b[m\u001b[K) prev_bbox_vec_deque.pop_back();\n",
            "             \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Ksrc/yolo_v2_class.cpp:454:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "                     if (\u001b[01;35m\u001b[Kcur_dist < max_dist\u001b[m\u001b[K && (k.track_id == 0 || dist_vec[m] > cur_dist)) {\n",
            "                         \u001b[01;35m\u001b[K~~~~~~~~~^~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Ksrc/yolo_v2_class.cpp:478:40:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         if (\u001b[01;35m\u001b[Kprev_bbox_vec_deque.size() > frames_story\u001b[m\u001b[K) prev_bbox_vec_deque.pop_back();\n",
            "             \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "g++ -std=c++11 -std=c++11 -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -DCUDNN_HALF -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include -DCUDNN_HALF -fPIC -o uselib src/yolo_console_dll.cpp -lm -pthread `pkg-config --libs opencv4 2> /dev/null || pkg-config --libs opencv` -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand -L/usr/local/cudnn/lib64 -lcudnn -lstdc++ -L ./ -l:libdarknet.so\n",
            "In file included from \u001b[01m\u001b[Ksrc/yolo_console_dll.cpp:23:0\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kvoid track_kalman_t::clear_old_states()\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:879:50:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "                 if ((result_vec_pred[state_id].x > img_size.width) ||\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:880:50:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "                     (result_vec_pred[state_id].y > img_size.height))\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ktrack_kalman_t::tst_t track_kalman_t::get_state_id(bbox_t, std::vector<bool>&)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:900:30:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         for (size_t i = 0; \u001b[01;35m\u001b[Ki < max_objects\u001b[m\u001b[K; ++i)\n",
            "                            \u001b[01;35m\u001b[K~~^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kstd::vector<bbox_t> track_kalman_t::predict()\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:990:30:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         for (size_t i = 0; \u001b[01;35m\u001b[Ki < max_objects\u001b[m\u001b[K; ++i)\n",
            "                            \u001b[01;35m\u001b[K~~^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kstd::vector<bbox_t> track_kalman_t::correct(std::vector<bbox_t>)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kinclude/yolo_v2_class.hpp:1025:30:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "         for (size_t i = 0; \u001b[01;35m\u001b[Ki < max_objects\u001b[m\u001b[K; ++i)\n",
            "                            \u001b[01;35m\u001b[K~~^~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Ksrc/yolo_console_dll.cpp:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kvoid draw_boxes(cv::Mat, std::vector<bbox_t>, std::vector<std::__cxx11::basic_string<char> >, int, int)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Ksrc/yolo_console_dll.cpp:192:46:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "             int max_width = (\u001b[01;35m\u001b[Ktext_size.width > i.w + 2\u001b[m\u001b[K) ? text_size.width : (i.w + 2);\n",
            "                              \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Ksrc/yolo_console_dll.cpp:201:62:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kcomparison between signed and unsigned integer expressions [\u001b[01;35m\u001b[K-Wsign-compare\u001b[m\u001b[K]\n",
            "                 int const max_width_3d = (\u001b[01;35m\u001b[Ktext_size_3d.width > i.w + 2\u001b[m\u001b[K) ? text_size_3d.width : (i.w + 2);\n",
            "                                           \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Ksrc/yolo_console_dll.cpp:183:15:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kunused variable ‘\u001b[01m\u001b[Kcolors\u001b[m\u001b[K’ [\u001b[01;35m\u001b[K-Wunused-variable\u001b[m\u001b[K]\n",
            "     int const \u001b[01;35m\u001b[Kcolors\u001b[m\u001b[K[6][3] = { { 1,0,1 },{ 0,0,1 },{ 0,1,1 },{ 0,1,0 },{ 1,1,0 },{ 1,0,0 } };\n",
            "               \u001b[01;35m\u001b[K^~~~~~\u001b[m\u001b[K\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# get bthe scaled yolov4 weights file that is pre-trained to detect 80 classes (objects) from shared google drive\n",
        "!wget --load-cookies /tmp/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1V3vsIaxAlGWvK4Aar9bAiK5U0QFttKwq' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id=1V3vsIaxAlGWvK4Aar9bAiK5U0QFttKwq\" -O yolov4-csp.weights && rm -rf /tmp/cookies.txt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I-Fcoe1Dl4si",
        "outputId": "de6d32c5-4753-4457-8da2-3b25526b1e2c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-05-01 12:32:49--  https://docs.google.com/uc?export=download&confirm=t&id=1V3vsIaxAlGWvK4Aar9bAiK5U0QFttKwq\n",
            "Resolving docs.google.com (docs.google.com)... 74.125.204.138, 74.125.204.101, 74.125.204.100, ...\n",
            "Connecting to docs.google.com (docs.google.com)|74.125.204.138|:443... connected.\n",
            "HTTP request sent, awaiting response... 303 See Other\n",
            "Location: https://doc-14-84-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/6otel26nal57679p5abbu7csq4ncaaqb/1651408350000/17800843676226924807/*/1V3vsIaxAlGWvK4Aar9bAiK5U0QFttKwq?e=download [following]\n",
            "Warning: wildcards not supported in HTTP.\n",
            "--2022-05-01 12:32:49--  https://doc-14-84-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/6otel26nal57679p5abbu7csq4ncaaqb/1651408350000/17800843676226924807/*/1V3vsIaxAlGWvK4Aar9bAiK5U0QFttKwq?e=download\n",
            "Resolving doc-14-84-docs.googleusercontent.com (doc-14-84-docs.googleusercontent.com)... 142.251.8.132, 2404:6800:4008:c15::84\n",
            "Connecting to doc-14-84-docs.googleusercontent.com (doc-14-84-docs.googleusercontent.com)|142.251.8.132|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 211944840 (202M) [application/octet-stream]\n",
            "Saving to: ‘yolov4-csp.weights’\n",
            "\n",
            "yolov4-csp.weights  100%[===================>] 202.13M   211MB/s    in 1.0s    \n",
            "\n",
            "2022-05-01 12:32:51 (211 MB/s) - ‘yolov4-csp.weights’ saved [211944840/211944840]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# import darknet functions to perform object detections\n",
        "from darknet import *\n",
        "# load in our YOLOv4 architecture network\n",
        "network, class_names, class_colors = load_network(\"cfg/yolov4-csp.cfg\", \"cfg/coco.data\", \"yolov4-csp.weights\")\n",
        "width = network_width(network)\n",
        "height = network_height(network)\n",
        "\n",
        "# darknet helper function to run detection on image\n",
        "def darknet_helper(img, width, height):\n",
        "  darknet_image = make_image(width, height, 3)\n",
        "  img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
        "  img_resized = cv2.resize(img_rgb, (width, height),\n",
        "                              interpolation=cv2.INTER_LINEAR)\n",
        "\n",
        "  # get image ratios to convert bounding boxes to proper size\n",
        "  img_height, img_width, _ = img.shape\n",
        "  width_ratio = img_width/width\n",
        "  height_ratio = img_height/height\n",
        "\n",
        "  # run model on darknet style image to get detections\n",
        "  copy_image_from_bytes(darknet_image, img_resized.tobytes())\n",
        "  detections = detect_image(network, class_names, darknet_image)\n",
        "  free_image(darknet_image)\n",
        "  return detections, width_ratio, height_ratio"
      ],
      "metadata": {
        "id": "QmvsxbE7l6Xf"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# run test on person.jpg image that comes with repository\n",
        "image = cv2.imread(\"data/person.jpg\")\n",
        "detections, width_ratio, height_ratio = darknet_helper(image, width, height)\n",
        "\n",
        "for label, confidence, bbox in detections:\n",
        "  left, top, right, bottom = bbox2points(bbox)\n",
        "  left, top, right, bottom = int(left * width_ratio), int(top * height_ratio), int(right * width_ratio), int(bottom * height_ratio)\n",
        "  cv2.rectangle(image, (left, top), (right, bottom), class_colors[label], 2)\n",
        "  cv2.putText(image, \"{} [{:.2f}]\".format(label, float(confidence)),\n",
        "                    (left, top - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5,\n",
        "                    class_colors[label], 2)\n",
        "cv2_imshow(image)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "sQC3degGmAgE",
        "outputId": "3dd9b066-0f22-4c2d-bc23-7a1de9a11e58"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=640x424 at 0x7FF63CA860D0>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# function to convert the JavaScript object into an OpenCV image\n",
        "def js_to_image(js_reply):\n",
        "  \"\"\"\n",
        "  Params:\n",
        "          js_reply: JavaScript object containing image from webcam\n",
        "  Returns:\n",
        "          img: OpenCV BGR image\n",
        "  \"\"\"\n",
        "  # decode base64 image\n",
        "  image_bytes = b64decode(js_reply.split(',')[1])\n",
        "  # convert bytes to numpy array\n",
        "  jpg_as_np = np.frombuffer(image_bytes, dtype=np.uint8)\n",
        "  # decode numpy array into OpenCV BGR image\n",
        "  img = cv2.imdecode(jpg_as_np, flags=1)\n",
        "\n",
        "  return img\n",
        "\n",
        "# function to convert OpenCV Rectangle bounding box image into base64 byte string to be overlayed on video stream\n",
        "def bbox_to_bytes(bbox_array):\n",
        "  \"\"\"\n",
        "  Params:\n",
        "          bbox_array: Numpy array (pixels) containing rectangle to overlay on video stream.\n",
        "  Returns:\n",
        "        bytes: Base64 image byte string\n",
        "  \"\"\"\n",
        "  # convert array into PIL image\n",
        "  bbox_PIL = PIL.Image.fromarray(bbox_array, 'RGBA')\n",
        "  iobuf = io.BytesIO()\n",
        "  # format bbox into png for return\n",
        "  bbox_PIL.save(iobuf, format='png')\n",
        "  # format return string\n",
        "  bbox_bytes = 'data:image/png;base64,{}'.format((str(b64encode(iobuf.getvalue()), 'utf-8')))\n",
        "\n",
        "  return bbox_bytes"
      ],
      "metadata": {
        "id": "fgzddoUamFFL"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def take_photo(filename='photo.jpg', quality=0.8):\n",
        "  js = Javascript('''\n",
        "    async function takePhoto(quality) {\n",
        "      const div = document.createElement('div');\n",
        "      const capture = document.createElement('button');\n",
        "      capture.textContent = 'Capture';\n",
        "      div.appendChild(capture);\n",
        "\n",
        "      const video = document.createElement('video');\n",
        "      video.style.display = 'block';\n",
        "      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n",
        "\n",
        "      document.body.appendChild(div);\n",
        "      div.appendChild(video);\n",
        "      video.srcObject = stream;\n",
        "      await video.play();\n",
        "\n",
        "      // Resize the output to fit the video element.\n",
        "      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n",
        "\n",
        "      // Wait for Capture to be clicked.\n",
        "      await new Promise((resolve) => capture.onclick = resolve);\n",
        "\n",
        "      const canvas = document.createElement('canvas');\n",
        "      canvas.width = video.videoWidth;\n",
        "      canvas.height = video.videoHeight;\n",
        "      canvas.getContext('2d').drawImage(video, 0, 0);\n",
        "      stream.getVideoTracks()[0].stop();\n",
        "      div.remove();\n",
        "      return canvas.toDataURL('image/jpeg', quality);\n",
        "    }\n",
        "    ''')\n",
        "  display(js)\n",
        "\n",
        "  # get photo data\n",
        "  data = eval_js('takePhoto({})'.format(quality))\n",
        "  # get OpenCV format image\n",
        "  img = js_to_image(data) \n",
        "  \n",
        "  # call our darknet helper on webcam image\n",
        "  detections, width_ratio, height_ratio = darknet_helper(img, width, height)\n",
        "\n",
        "  # loop through detections and draw them on webcam image\n",
        "  for label, confidence, bbox in detections:\n",
        "    left, top, right, bottom = bbox2points(bbox)\n",
        "    left, top, right, bottom = int(left * width_ratio), int(top * height_ratio), int(right * width_ratio), int(bottom * height_ratio)\n",
        "    cv2.rectangle(img, (left, top), (right, bottom), class_colors[label], 2)\n",
        "    cv2.putText(img, \"{} [{:.2f}]\".format(label, float(confidence)),\n",
        "                      (left, top - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5,\n",
        "                      class_colors[label], 2)\n",
        "  # save image\n",
        "  cv2.imwrite(filename, img)\n",
        "\n",
        "  return filename"
      ],
      "metadata": {
        "id": "SPjR2o2mmH8E"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "  filename = take_photo('photo.jpg')\n",
        "  print('Saved to {}'.format(filename))\n",
        "  \n",
        "  # Show the image which was just taken.\n",
        "  display(Image(filename))\n",
        "except Exception as err:\n",
        "  # Errors will be thrown if the user does not have a webcam or if they do not\n",
        "  # grant the page permission to access it.\n",
        "  print(str(err))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 514
        },
        "id": "-moJbr_gmIeo",
        "outputId": "3b13623f-8009-4221-d4fc-3c36e05d9c3b"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function takePhoto(quality) {\n",
              "      const div = document.createElement('div');\n",
              "      const capture = document.createElement('button');\n",
              "      capture.textContent = 'Capture';\n",
              "      div.appendChild(capture);\n",
              "\n",
              "      const video = document.createElement('video');\n",
              "      video.style.display = 'block';\n",
              "      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n",
              "\n",
              "      document.body.appendChild(div);\n",
              "      div.appendChild(video);\n",
              "      video.srcObject = stream;\n",
              "      await video.play();\n",
              "\n",
              "      // Resize the output to fit the video element.\n",
              "      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n",
              "\n",
              "      // Wait for Capture to be clicked.\n",
              "      await new Promise((resolve) => capture.onclick = resolve);\n",
              "\n",
              "      const canvas = document.createElement('canvas');\n",
              "      canvas.width = video.videoWidth;\n",
              "      canvas.height = video.videoHeight;\n",
              "      canvas.getContext('2d').drawImage(video, 0, 0);\n",
              "      stream.getVideoTracks()[0].stop();\n",
              "      div.remove();\n",
              "      return canvas.toDataURL('image/jpeg', quality);\n",
              "    }\n",
              "    "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved to photo.jpg\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ],
            "image/jpeg": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# JavaScript to properly create our live video stream using our webcam as input\n",
        "def video_stream():\n",
        "  js = Javascript('''\n",
        "    var video;\n",
        "    var div = null;\n",
        "    var stream;\n",
        "    var captureCanvas;\n",
        "    var imgElement;\n",
        "    var labelElement;\n",
        "    \n",
        "    var pendingResolve = null;\n",
        "    var shutdown = false;\n",
        "    \n",
        "    function removeDom() {\n",
        "       stream.getVideoTracks()[0].stop();\n",
        "       video.remove();\n",
        "       div.remove();\n",
        "       video = null;\n",
        "       div = null;\n",
        "       stream = null;\n",
        "       imgElement = null;\n",
        "       captureCanvas = null;\n",
        "       labelElement = null;\n",
        "    }\n",
        "    \n",
        "    function onAnimationFrame() {\n",
        "      if (!shutdown) {\n",
        "        window.requestAnimationFrame(onAnimationFrame);\n",
        "      }\n",
        "      if (pendingResolve) {\n",
        "        var result = \"\";\n",
        "        if (!shutdown) {\n",
        "          captureCanvas.getContext('2d').drawImage(video, 0, 0, 640, 480);\n",
        "          result = captureCanvas.toDataURL('image/jpeg', 0.8)\n",
        "        }\n",
        "        var lp = pendingResolve;\n",
        "        pendingResolve = null;\n",
        "        lp(result);\n",
        "      }\n",
        "    }\n",
        "    \n",
        "    async function createDom() {\n",
        "      if (div !== null) {\n",
        "        return stream;\n",
        "      }\n",
        "\n",
        "      div = document.createElement('div');\n",
        "      div.style.border = '2px solid black';\n",
        "      div.style.padding = '3px';\n",
        "      div.style.width = '100%';\n",
        "      div.style.maxWidth = '600px';\n",
        "      document.body.appendChild(div);\n",
        "      \n",
        "      const modelOut = document.createElement('div');\n",
        "      modelOut.innerHTML = \"<span>Status:</span>\";\n",
        "      labelElement = document.createElement('span');\n",
        "      labelElement.innerText = 'No data';\n",
        "      labelElement.style.fontWeight = 'bold';\n",
        "      modelOut.appendChild(labelElement);\n",
        "      div.appendChild(modelOut);\n",
        "           \n",
        "      video = document.createElement('video');\n",
        "      video.style.display = 'block';\n",
        "      video.width = div.clientWidth - 6;\n",
        "      video.setAttribute('playsinline', '');\n",
        "      video.onclick = () => { shutdown = true; };\n",
        "      stream = await navigator.mediaDevices.getUserMedia(\n",
        "          {video: { facingMode: \"environment\"}});\n",
        "      div.appendChild(video);\n",
        "\n",
        "      imgElement = document.createElement('img');\n",
        "      imgElement.style.position = 'absolute';\n",
        "      imgElement.style.zIndex = 1;\n",
        "      imgElement.onclick = () => { shutdown = true; };\n",
        "      div.appendChild(imgElement);\n",
        "      \n",
        "      const instruction = document.createElement('div');\n",
        "      instruction.innerHTML = \n",
        "          '<span style=\"color: red; font-weight: bold;\">' +\n",
        "          'When finished, click here or on the video to stop this demo</span>';\n",
        "      div.appendChild(instruction);\n",
        "      instruction.onclick = () => { shutdown = true; };\n",
        "      \n",
        "      video.srcObject = stream;\n",
        "      await video.play();\n",
        "\n",
        "      captureCanvas = document.createElement('canvas');\n",
        "      captureCanvas.width = 640; //video.videoWidth;\n",
        "      captureCanvas.height = 480; //video.videoHeight;\n",
        "      window.requestAnimationFrame(onAnimationFrame);\n",
        "      \n",
        "      return stream;\n",
        "    }\n",
        "    async function stream_frame(label, imgData) {\n",
        "      if (shutdown) {\n",
        "        removeDom();\n",
        "        shutdown = false;\n",
        "        return '';\n",
        "      }\n",
        "\n",
        "      var preCreate = Date.now();\n",
        "      stream = await createDom();\n",
        "      \n",
        "      var preShow = Date.now();\n",
        "      if (label != \"\") {\n",
        "        labelElement.innerHTML = label;\n",
        "      }\n",
        "            \n",
        "      if (imgData != \"\") {\n",
        "        var videoRect = video.getClientRects()[0];\n",
        "        imgElement.style.top = videoRect.top + \"px\";\n",
        "        imgElement.style.left = videoRect.left + \"px\";\n",
        "        imgElement.style.width = videoRect.width + \"px\";\n",
        "        imgElement.style.height = videoRect.height + \"px\";\n",
        "        imgElement.src = imgData;\n",
        "      }\n",
        "      \n",
        "      var preCapture = Date.now();\n",
        "      var result = await new Promise(function(resolve, reject) {\n",
        "        pendingResolve = resolve;\n",
        "      });\n",
        "      shutdown = false;\n",
        "      \n",
        "      return {'create': preShow - preCreate, \n",
        "              'show': preCapture - preShow, \n",
        "              'capture': Date.now() - preCapture,\n",
        "              'img': result};\n",
        "    }\n",
        "    ''')\n",
        "\n",
        "  display(js)\n",
        "  \n",
        "def video_frame(label, bbox):\n",
        "  data = eval_js('stream_frame(\"{}\", \"{}\")'.format(label, bbox))\n",
        "  return data"
      ],
      "metadata": {
        "id": "kNT1UZOMmRg5"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# start streaming video from webcam\n",
        "video_stream()\n",
        "# label for video\n",
        "label_html = 'Capturing...'\n",
        "# initialze bounding box to empty\n",
        "bbox = ''\n",
        "count = 0 \n",
        "while True:\n",
        "    js_reply = video_frame(label_html, bbox)\n",
        "    if not js_reply:\n",
        "        break\n",
        "\n",
        "    # convert JS response to OpenCV Image\n",
        "    frame = js_to_image(js_reply[\"img\"])\n",
        "\n",
        "    # create transparent overlay for bounding box\n",
        "    bbox_array = np.zeros([480,640,4], dtype=np.uint8)\n",
        "\n",
        "    # call our darknet helper on video frame\n",
        "    detections, width_ratio, height_ratio = darknet_helper(frame, width, height)\n",
        "\n",
        "    # loop through detections and draw them on transparent overlay image\n",
        "    for label, confidence, bbox in detections:\n",
        "      left, top, right, bottom = bbox2points(bbox)\n",
        "      left, top, right, bottom = int(left * width_ratio), int(top * height_ratio), int(right * width_ratio), int(bottom * height_ratio)\n",
        "      bbox_array = cv2.rectangle(bbox_array, (left, top), (right, bottom), class_colors[label], 2)\n",
        "      bbox_array = cv2.putText(bbox_array, \"{} [{:.2f}]\".format(label, float(confidence)),\n",
        "                        (left, top - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5,\n",
        "                        class_colors[label], 2)\n",
        "\n",
        "    bbox_array[:,:,3] = (bbox_array.max(axis = 2) > 0 ).astype(int) * 255\n",
        "    # convert overlay of bbox into bytes\n",
        "    bbox_bytes = bbox_to_bytes(bbox_array)\n",
        "    # update bbox so next frame gets new overlay\n",
        "    bbox = bbox_bytes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "kxnTBd_umYH0",
        "outputId": "5e140f1b-52da-47d9-a8e1-a3664953da2f"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    var video;\n",
              "    var div = null;\n",
              "    var stream;\n",
              "    var captureCanvas;\n",
              "    var imgElement;\n",
              "    var labelElement;\n",
              "    \n",
              "    var pendingResolve = null;\n",
              "    var shutdown = false;\n",
              "    \n",
              "    function removeDom() {\n",
              "       stream.getVideoTracks()[0].stop();\n",
              "       video.remove();\n",
              "       div.remove();\n",
              "       video = null;\n",
              "       div = null;\n",
              "       stream = null;\n",
              "       imgElement = null;\n",
              "       captureCanvas = null;\n",
              "       labelElement = null;\n",
              "    }\n",
              "    \n",
              "    function onAnimationFrame() {\n",
              "      if (!shutdown) {\n",
              "        window.requestAnimationFrame(onAnimationFrame);\n",
              "      }\n",
              "      if (pendingResolve) {\n",
              "        var result = \"\";\n",
              "        if (!shutdown) {\n",
              "          captureCanvas.getContext('2d').drawImage(video, 0, 0, 640, 480);\n",
              "          result = captureCanvas.toDataURL('image/jpeg', 0.8)\n",
              "        }\n",
              "        var lp = pendingResolve;\n",
              "        pendingResolve = null;\n",
              "        lp(result);\n",
              "      }\n",
              "    }\n",
              "    \n",
              "    async function createDom() {\n",
              "      if (div !== null) {\n",
              "        return stream;\n",
              "      }\n",
              "\n",
              "      div = document.createElement('div');\n",
              "      div.style.border = '2px solid black';\n",
              "      div.style.padding = '3px';\n",
              "      div.style.width = '100%';\n",
              "      div.style.maxWidth = '600px';\n",
              "      document.body.appendChild(div);\n",
              "      \n",
              "      const modelOut = document.createElement('div');\n",
              "      modelOut.innerHTML = \"<span>Status:</span>\";\n",
              "      labelElement = document.createElement('span');\n",
              "      labelElement.innerText = 'No data';\n",
              "      labelElement.style.fontWeight = 'bold';\n",
              "      modelOut.appendChild(labelElement);\n",
              "      div.appendChild(modelOut);\n",
              "           \n",
              "      video = document.createElement('video');\n",
              "      video.style.display = 'block';\n",
              "      video.width = div.clientWidth - 6;\n",
              "      video.setAttribute('playsinline', '');\n",
              "      video.onclick = () => { shutdown = true; };\n",
              "      stream = await navigator.mediaDevices.getUserMedia(\n",
              "          {video: { facingMode: \"environment\"}});\n",
              "      div.appendChild(video);\n",
              "\n",
              "      imgElement = document.createElement('img');\n",
              "      imgElement.style.position = 'absolute';\n",
              "      imgElement.style.zIndex = 1;\n",
              "      imgElement.onclick = () => { shutdown = true; };\n",
              "      div.appendChild(imgElement);\n",
              "      \n",
              "      const instruction = document.createElement('div');\n",
              "      instruction.innerHTML = \n",
              "          '<span style=\"color: red; font-weight: bold;\">' +\n",
              "          'When finished, click here or on the video to stop this demo</span>';\n",
              "      div.appendChild(instruction);\n",
              "      instruction.onclick = () => { shutdown = true; };\n",
              "      \n",
              "      video.srcObject = stream;\n",
              "      await video.play();\n",
              "\n",
              "      captureCanvas = document.createElement('canvas');\n",
              "      captureCanvas.width = 640; //video.videoWidth;\n",
              "      captureCanvas.height = 480; //video.videoHeight;\n",
              "      window.requestAnimationFrame(onAnimationFrame);\n",
              "      \n",
              "      return stream;\n",
              "    }\n",
              "    async function stream_frame(label, imgData) {\n",
              "      if (shutdown) {\n",
              "        removeDom();\n",
              "        shutdown = false;\n",
              "        return '';\n",
              "      }\n",
              "\n",
              "      var preCreate = Date.now();\n",
              "      stream = await createDom();\n",
              "      \n",
              "      var preShow = Date.now();\n",
              "      if (label != \"\") {\n",
              "        labelElement.innerHTML = label;\n",
              "      }\n",
              "            \n",
              "      if (imgData != \"\") {\n",
              "        var videoRect = video.getClientRects()[0];\n",
              "        imgElement.style.top = videoRect.top + \"px\";\n",
              "        imgElement.style.left = videoRect.left + \"px\";\n",
              "        imgElement.style.width = videoRect.width + \"px\";\n",
              "        imgElement.style.height = videoRect.height + \"px\";\n",
              "        imgElement.src = imgData;\n",
              "      }\n",
              "      \n",
              "      var preCapture = Date.now();\n",
              "      var result = await new Promise(function(resolve, reject) {\n",
              "        pendingResolve = resolve;\n",
              "      });\n",
              "      shutdown = false;\n",
              "      \n",
              "      return {'create': preShow - preCreate, \n",
              "              'show': preCapture - preShow, \n",
              "              'capture': Date.now() - preCapture,\n",
              "              'img': result};\n",
              "    }\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}